<?xml version="1.0" encoding="UTF-8"?>

        
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                         http://www.springframework.org/schema/context
                         http://www.springframework.org/schema/context/spring-context-3.0.xsd
                         http://www.springframework.org/schema/util
                         http://www.springframework.org/schema/util/spring-util.xsd
                         http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring
                         http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.2.xsd
                         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                         http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">

    <!-- Scans the classpath of this application for @Components to deploy as beans -->
    <context:component-scan base-package="com.hp.autonomy.frontend">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <context:property-placeholder location="classpath:com/hp/autonomy/frontend/find.properties"/>

    <ehcache:annotation-driven create-missing-caches="true"/>

    <ehcache:config cache-manager="cacheManager">
        <ehcache:evict-expired-elements interval="60" />
    </ehcache:config>

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="/WEB-INF/ehcache.xml"/>
    </bean>

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
        <property name="defaultLocale" value="en" />
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="com.hp.autonomy.frontend.i18n"/>
    </bean>

    <bean id="propertiesLookup" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <qualifier value="application"/>
        <property name="singleton" value="true"/>
        <property name="location" value="classpath:com/hp/autonomy/frontend/find.properties"/>
    </bean>

    <bean id="connectionPoolProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <qualifier value="connectionPool"/>
        <property name="singleton" value="true"/>
        <property name="location" value="classpath:com/hp/autonomy/frontend/connection-pool.properties"/>
    </bean>

    <bean id="connectionPoolMinimalProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <qualifier value="connectionPoolMinimal"/>
        <property name="singleton" value="true"/>
        <property name="location" value="classpath:com/hp/autonomy/frontend/connection-pool-minimal.properties"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
      <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dynamicDataSourceProxy"/>
        <property name="packagesToScan" value="com.hp.autonomy.frontend"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL82Dialect</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            </props>
        </property>
    </bean>

    <bean id="dynamicDataSourceProxy" class="com.autonomy.frontend.configuration.database.ClosableDynamicDataSourceProxy" destroy-method="close">
        <!-- targetDataSource is required, but will be replaced .... -->
        <property name="targetDataSource" ref="com.jolbox.bonecp.BoneCPDataSource"/>
    </bean>

    <bean class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close"/>

    <bean id="httpClientFactory" class="com.autonomy.aci.client.transport.impl.HttpClientFactory"
          p:maxConnectionsPerRoute="20"
          p:maxTotalConnections="120"
          p:staleCheckingEnabled="true"
          p:soTimeout="90000"/>

    <!-- HttpClientFactory with a timeout set to 2 seconds so we can test connections without having to wait 90 seconds,
        since connecting with HTTPS connection to a HTTP port waits the full timeout before reporting failure -->
    <bean id="testHttpClientFactory" class="com.autonomy.aci.client.transport.impl.HttpClientFactory"
          p:maxConnectionsPerRoute="5"
          p:maxTotalConnections="5"
          p:staleCheckingEnabled="true"
          p:soTimeout="2000"/>

    <bean id="httpClient" factory-bean="httpClientFactory" factory-method="createInstance"/>

    <bean id="testHttpClient" factory-bean="testHttpClientFactory" factory-method="createInstance"/>

    <bean name="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set/>
        </property>
    </bean>

    <bean id="processorFactory" class="com.autonomy.aci.client.annotations.IdolAnnotationsProcessorFactoryImpl"/>

    <bean id="loginFilter" class="com.autonomy.login.filter.LoginFilterImpl"
          p:loginPageUrl="/login/login.html"
          p:loginUri="/api/login/session"
          p:authenticatedUrl="/api/login/authenticated/session"
          p:configService-ref="configFileService"/>

    <bean class="com.autonomy.frontend.configuration.filter.ConfigEnvironmentVariableFilter" name="configEnvironmentVariableFilter"
          p:configPage="/config.html"
          p:configService-ref="configFileService"/>

    <bean id="communityService" class="com.autonomy.frontend.configuration.CommunityServiceImpl"
          p:aciService-ref="aciService"
          p:processorFactory-ref="processorFactory"/>

    <bean id="configFileService" class="com.hp.autonomy.frontend.configuration.FindConfigFileService"
          p:configFileLocation="hp.find.home"
          p:configFileName="config.json"
          p:defaultConfigFile="classpath:com/hp/autonomy/frontend/configuration/defaultConfigFile.json"
          p:mapper-ref="jacksonObjectMapperFactoryBean"
          p:textEncryptor-ref="org.jasypt.util.text.BasicTextEncryptor"
          p:filterProvider-ref="com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider"
          p:validationService-ref="validationService"/>

    <bean id="validationService" class="com.autonomy.frontend.configuration.ValidationServiceImpl">
        <property name="validators">
            <set>
                <bean class="com.autonomy.frontend.configuration.ServerConfigValidator"
                      p:aciService-ref="testAciService"
                      p:indexingService-ref="testIndexingService" />
                <bean class="com.autonomy.frontend.configuration.database.PostgresValidator"
                      p:databaseService-ref="postgresService" />
                <bean class="com.autonomy.frontend.configuration.LoginValidator"
                      p:aciService-ref="testAciService"/>
            </set>
        </property>
    </bean>

    <bean id="jacksonObjectMapperFactoryBean" class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
        <property name="featuresToEnable">
            <array>
                <util:constant static-field="com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT"/>
            </array>
        </property>
    </bean>

    <bean id="configurationFilter" class="com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter$SerializeExceptFilter">
        <constructor-arg>
            <set>
                <value>productType</value>
                <value>indexErrorMessage</value>
                <value>enabled</value>
            </set>
        </constructor-arg>
    </bean>

    <bean class="com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider">
        <constructor-arg>
            <map>
                <entry key="configurationFilter" value-ref="configurationFilter"/>
            </map>
        </constructor-arg>
    </bean>

    <bean class="org.jasypt.util.text.BasicTextEncryptor" p:password-ref="passwordFactory"/>
    <bean id="passwordFactory" class="com.hp.autonomy.frontend.configuration.TextEncryptorPasswordFactory"/>

    <!-- ACI Service Definitions. Uses special implementations to hide the configuration details -->
    <bean id="aciService" class="com.autonomy.aci.client.services.impl.AciServiceImpl">
        <constructor-arg>
            <bean class="com.autonomy.aci.client.transport.impl.AciHttpClientImpl" p:httpClient-ref="httpClient"/>
        </constructor-arg>
    </bean>

    <bean id="testAciService" class="com.autonomy.aci.client.services.impl.AciServiceImpl">
        <constructor-arg>
            <bean class="com.autonomy.aci.client.transport.impl.AciHttpClientImpl" p:httpClient-ref="testHttpClient"/>
        </constructor-arg>
    </bean>

    <bean class="com.autonomy.nonaci.indexing.impl.IndexingServiceImpl">
        <constructor-arg ref="httpClient"/>
    </bean>

    <bean id="testIndexingService" class="com.autonomy.nonaci.indexing.impl.IndexingServiceImpl">
        <constructor-arg ref="testHttpClient"/>
    </bean>

    <bean id="postgresService" class="com.hp.autonomy.frontend.configuration.PostgresBoneCPDatabaseService">
        <property name="schemaOption" value="FLYWAY"/>
        <property name="localSessionFactoryBeanName" value="sessionFactory"/>
        <property name="dataSource" ref="dynamicDataSourceProxy"/>
        <property name="connectionProperties" ref="connectionPoolProperties"/>
        <property name="minimalConnectionProperties" ref="connectionPoolMinimalProperties"/>
        <property name="configService" ref="configFileService"/>
    </bean>

    <bean id="userAdmin" class="com.autonomy.user.admin.UserAdminImpl">
        <constructor-arg index="0" ref="configFileService"/>
        <constructor-arg index="1" ref="aciService"/>
        <constructor-arg index="2" ref="processorFactory"/>
    </bean>

    <bean id="roles" class="com.autonomy.login.role.Roles">
        <constructor-arg index="0">
            <bean id="rolesList" class="java.util.ArrayList">
                <constructor-arg>
                    <list>
                        <ref bean="roleAdmin"/>
                        <ref bean="roleUserAdmin"/>
                    </list>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="roleAdmin" class="com.autonomy.login.role.RoleFactory">
        <property name="name" value="admin"/>
        <property name="privileges" ref="roleAdminPrivileges"/>
        <property name="sessionAttribute" value="adminUsername"/>
    </bean>


    <bean id="roleUserAdmin" class="com.autonomy.login.role.RoleFactory">
        <property name="name" value="useradmin"/>
        <property name="privileges" ref="roleUserAdminPrivileges"/>
        <property name="parent">
            <bean id="roleUserAdminParent" class="java.util.Collections" factory-method="unmodifiableSet">
                <constructor-arg>
                    <set>
                        <ref bean="roleAdmin"/>
                    </set>
                </constructor-arg>
            </bean>
        </property>
        <property name="sessionAttribute" value="userAdminUsername"/>
    </bean>

    <bean id="roleAdminPrivileges" class="java.util.Collections" factory-method="unmodifiableSet">
        <constructor-arg>
            <set>
                <value>login</value>
            </set>
        </constructor-arg>
    </bean>

    <bean id="roleUserAdminPrivileges" class="java.util.Collections" factory-method="unmodifiableSet">
        <constructor-arg>
            <set>
                <value>users</value>
                <value>settings</value>
            </set>
        </constructor-arg>
    </bean>

    <bean id="userService" class="com.autonomy.login.user.UserServiceImpl">
        <property name="configService" ref="configFileService"/>
        <property name="userAdmin" ref="userAdmin"/>
    </bean>
</beans>